import numpy as np
import nltk
from nltk.tokenize import word_tokenize
import spacy
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

nltk.download('punkt')
nltk.download('punkt_tab') # Added download for punkt_tab
spacy.cli.download("en_core_web_sm")
nlp = spacy.load("en_core_web_sm")

corpus = ("One disadvantage of using 'Best Of' sampling is that it may lead to limited exploration of the model's "
          "knowledge and creativity. By focusing on the most probable next words, the model might generate responses that are "
          "safe and conventional, potentially missing out on more diverse and innovative outputs. The lack of exploration could "
          "result in repetitive or less imaginative responses, especially in situations where novel and unconventional ideas are "
          "desired. To address this limitation, other sampling strategies like temperature-based sampling or top-p (nucleus) sampling "
          "can be employed to introduce more randomness and encourage the model to explore a broader range of possibilities. "
          "However, it's essential to carefully balance exploration and exploitation based on the specific requirements of the task or "
          "application.")
tokens = word_tokenize(corpus)

# Lemmatize tokens using spaCy
doc = nlp(corpus)
lemmatized_tokens = [token.lemma_ for token in doc]

# Combine tokens and lemmatized tokens for the tokenizer
# Usually, you want to train the tokenizer on sentences, not single tokens.
# Let's just use the original corpus text as one sequence for tokenizer
tokenizer = Tokenizer()
tokenizer.fit_on_texts([corpus])

total_words = len(tokenizer.word_index) + 1

# Convert the corpus to sequences of tokens
token_list = tokenizer.texts_to_sequences([corpus])[0]

# Create n-gram sequences
input_sequences = []
for i in range(1, len(token_list)):
    n_gram_sequence = token_list[:i+1]
    input_sequences.append(n_gram_sequence)

# Pad sequences
max_sequence_len = max(len(seq) for seq in input_sequences)
input_sequences = pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre')

# Split into inputs and labels
X = input_sequences[:, :-1]
y = input_sequences[:, -1]

# Define the model
model = Sequential()
model.add(Embedding(total_words, 100, input_length=max_sequence_len - 1))
model.add(LSTM(100))
model.add(Dense(total_words, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X, y, epochs=10, verbose=1)
